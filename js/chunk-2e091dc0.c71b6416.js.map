{"version":3,"sources":["webpack:///./src/components/CreatePost.vue","webpack:///./src/components/Uploader.vue","webpack:///./src/components/Uploader.vue?fc83","webpack:///./src/components/Uploader.vue?a756","webpack:///./src/components/CreatePost.vue?505b","webpack:///./src/components/CreatePost.vue?352c","webpack:///./src/components/CreatePost.vue?4a2c"],"names":["class","role","for","isEditMode","action","handleFileUploaded","beforeUpData","uploaded","uploadedImageData","loading","success","src","dataProps","uploadedData","alt","error","submitFn","submit","rule","tliteRules","val","tliteValue","type","placeholder","textRules","textValue","tag","rows","disabled","filesStates","name","ref","handleFileChange","props","String","required","Function","Object","inheritAttrs","emits","setup","context","newValue","value","data","url","fileInput","fileBtnClick","click","e","target","files","filesArr","Array","from","result","formData","FormData","append","a","post","headers","then","res","emit","catch","console","log","finally","render","components","ValidateForm","ValidateInput","Uploader","router","route","query","id","store","message","dispatch","image","title","content","imageId","rawData","_id","state","user","PostData","column","author","actionName","sendData","payload","createMessage","setTimeout","push","params","file","format","size","passed","onfileUploaded","resData"],"mappings":"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","file":"js/chunk-2e091dc0.c71b6416.js","sourcesContent":["<template>\r\n  <div class=\"create-post-page\">\r\n    <h4 class=\"margin-start\">{{isEditMode ? '编辑文章' : '新建文章'}}</h4>\r\n    <Uploader\r\n      :action=\"'http://apis.imooc.com/api/upload'\"\r\n      @fileUploaded=\"handleFileUploaded\"\r\n      :beforeUpData=\"beforeUpData\"\r\n      :uploaded=\"uploadedImageData\"\r\n      class=\"d-flex align-items-center justify-content-center bg-light text-secondary w-100 my-4\"\r\n    >\r\n      <h2>点击上传头图</h2>\r\n      <template #loading>\r\n        <div class=\"spinner-border\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n        <h2 class=\"text-primary\">正在加载中...</h2>\r\n      </template>\r\n      <template #success=\"dataProps\">\r\n        <img :src=\"dataProps.uploadedData\" alt=\"jpg\">\r\n      </template>\r\n      <template #error>\r\n        <h2 class=\"text-primary\">上传出错</h2>\r\n      </template>\r\n    </Uploader>\r\n    <validate-form @form-submit=\"submitFn\">\r\n      <div class=\"mb-3\">\r\n        <label class=\"form-label\">文章标题</label>\r\n        <validate-input :rule=\"tliteRules\" v-model=\"val.tliteValue\" type=\"text\" placeholder=\"请输入文章标题\"></validate-input>\r\n      </div>\r\n      <div class=\"mb-3\">\r\n        <label for=\"exampleInputPassword1\" class=\"form-label\">文章详情</label>\r\n        <validate-input :rule=\"textRules\" v-model=\"val.textValue\" tag=\"textarea\" rows=\"10\" placeholder=\"请输入文章详情\"></validate-input>\r\n      </div>\r\n      <template #submit>\r\n        <button class=\"btn btn-primary btn-large\">{{isEditMode ? '更新文章' : '发表文章'}}</button>\r\n      </template>\r\n    </validate-form>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { ref, defineComponent, onMounted, reactive } from 'vue'\r\nimport ValidateForm from './ValidateForm.vue'\r\nimport ValidateInput from './ValidateInput.vue'\r\nimport { useStore } from 'vuex'\r\nimport { beforeUploadCheck } from '../helps'\r\nimport { GlobalDataProps, PostProps, loaderResType, imageData } from '../store'\r\nimport createMessage from './createMessage'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport Uploader from './Uploader.vue'\r\ninterface textsRules{\r\n  type: 'required';\r\n  message: string;\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'CreatePost',\r\n  components: {\r\n    ValidateForm,\r\n    ValidateInput,\r\n    Uploader\r\n  },\r\n  setup () {\r\n    const router = useRouter()\r\n    const route = useRoute()\r\n    const isEditMode = !!route.query.id\r\n    const store = useStore<GlobalDataProps>()\r\n    const uploadedImageData = ref()\r\n    const tliteRules: textsRules[] = [\r\n      {\r\n        type: 'required',\r\n        message: '文章标题不能为空'\r\n      }\r\n    ]\r\n    const textRules: textsRules[] = [\r\n      {\r\n        type: 'required',\r\n        message: '文章详情不能为空'\r\n      }\r\n    ]\r\n    const val = reactive({\r\n      tliteValue: '',\r\n      textValue: ''\r\n    })\r\n    onMounted(() => {\r\n      if (isEditMode) {\r\n        store.dispatch('postDetailRst', route.query.id).then((res: PostProps) => {\r\n          if (res.image) {\r\n            uploadedImageData.value = { data: res.image }\r\n          }\r\n          val.tliteValue = res.title\r\n          val.textValue = res.content || ''\r\n        })\r\n      }\r\n    })\r\n    let imageId = ''\r\n    const handleFileUploaded = (rawData: loaderResType<imageData>) => {\r\n      if (rawData.data._id) {\r\n        imageId = rawData.data._id\r\n      }\r\n    }\r\n    const submitFn = (value: boolean) => {\r\n      if (value) {\r\n        const { column, _id } = store.state.user\r\n        if (column) {\r\n          const PostData: PostProps = { // 文本数据\r\n            column: `${column}`,\r\n            title: val.tliteValue,\r\n            content: val.textValue,\r\n            author: `${_id}`\r\n          }\r\n          if (imageId) {\r\n            PostData.image = imageId\r\n          }\r\n          const actionName = isEditMode ? 'updatePost' : 'postDetailRst'\r\n          const sendData = isEditMode ? {\r\n            id: route.query.id,\r\n            payload: PostData\r\n          } : PostData\r\n          store.dispatch(actionName, sendData).then(() => {\r\n            createMessage('发表成功, 2秒后跳转到文章', 'success', 2000)\r\n            setTimeout(() => {\r\n              router.push({ name: 'columnDetail', params: { id: column } })\r\n            }, 2000)\r\n          })\r\n        }\r\n      }\r\n    }\r\n    // 上传文件类型限制功能\r\n    const beforeUpData = (file: File) => {\r\n      const format = ['image/jpeg', 'image/png']\r\n      const result = beforeUploadCheck(file, { format, size: 1 })\r\n      if (result.passed) {\r\n        createMessage('上传成功', 'success')\r\n      } else {\r\n        if (result.error === 'format') {\r\n          createMessage('上传图片只能是image/jpeg格式', 'error')\r\n        } else {\r\n          createMessage('上传图片大小超出1M', 'error')\r\n        }\r\n      }\r\n\r\n      return result.passed\r\n    }\r\n    //  成功结果触发\r\n    const onfileUploaded = (resData: loaderResType<imageData>) => {\r\n      createMessage(`上传成功，成功id为：${resData.data._id}`, 'success')\r\n    }\r\n\r\n    return { tliteRules, textRules, val, submitFn, onfileUploaded, beforeUpData, handleFileUploaded, uploadedImageData, isEditMode }\r\n  }\r\n})\r\n</script>\r\n\r\n<style>\r\n.create-post-page .file-upload-container {\r\n  height:200px;\r\n  cursor: pointer;\r\n}\r\n.create-post-page .file-upload-container img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n</style>\r\n","<template>\r\n  <div @click.prevent=\"fileBtnClick\" v-bind=\"$attrs\" class=\"file-upload-container\">\r\n    <slot v-if=\"filesStates === 'loading'\" name=\"loading\">\r\n      <button class=\"btn btn-primary\" disabled>正在上传...</button>\r\n    </slot>\r\n    <slot v-else-if=\"filesStates === 'success'\" name=\"success\" :uploadedData=\"uploadedData\">\r\n      <button class=\"btn btn-primary\">上传成功</button>\r\n    </slot>\r\n    <slot v-else-if=\"filesStates === 'error'\" name=\"error\">\r\n      <button class=\"btn btn-primary\">上传出错</button>\r\n    </slot>\r\n    <slot v-else name=\"default\">\r\n      <button class=\"btn btn-primary\">点击上传</button>\r\n    </slot>\r\n  </div>\r\n  <input type=\"file\" name=\"fileOne\" ref=\"fileInput\" class=\"d-none file-input\" @change=\"handleFileChange\">\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, ref, PropType, watch } from 'vue'\r\n// import { axiosInstance } from '../axiosDefaults'\r\nimport axios from 'axios'\r\ntype filesType = 'ready' | 'loading' | 'success' | 'error'\r\ntype filesFunction = (file: File) => boolean\r\nexport default defineComponent({\r\n  name: 'Uploader',\r\n  props: {\r\n    action: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    beforeUpData: {\r\n      type: Function as PropType<filesFunction>\r\n    },\r\n    uploaded: {\r\n      type: Object\r\n    }\r\n  },\r\n  inheritAttrs: false,\r\n  emits: ['fileUploaded', 'uploadedError'],\r\n  setup (props, context) {\r\n    const uploadedData = ref(props.uploaded)\r\n    // 上传文件状态\r\n    const filesStates = ref<filesType>(props.uploaded ? 'success' : 'ready')\r\n\r\n    watch(() => props.uploaded, newValue => {\r\n      if (newValue) {\r\n        filesStates.value = 'success'\r\n        uploadedData.value = newValue.data.url\r\n      }\r\n    })\r\n    // 上传Input 的 dom\r\n    const fileInput = ref<null | HTMLInputElement>(null)\r\n    const fileBtnClick = () => { // 按钮的点击事件\r\n      if (fileInput.value) {\r\n        fileInput.value.click() // 使用click()点击api 模拟点击\r\n      }\r\n    }\r\n    // 上传事件\r\n    const handleFileChange = async (e: Event) => {\r\n      const target = e.target as HTMLInputElement\r\n      const files = target.files // 获取上传文件的list\r\n      if (files) {\r\n        const filesArr = Array.from(files)\r\n        if (props.beforeUpData) { // 上传类型的限制\r\n          const result = props.beforeUpData(filesArr[0])\r\n          if (!result) {\r\n            filesStates.value = 'error'\r\n            return\r\n          }\r\n        }\r\n        filesStates.value = 'loading'\r\n        // 把fileList 转换成一个数组\r\n        // 实例化表单\r\n        const formData = new FormData()\r\n        // 把上传的文件传入表单中\r\n        formData.append('file', filesArr[0])\r\n        // const firstFiles = filesArr[0]\r\n        // 发送请求把文件传给后端\r\n        await axios.post(props.action, formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/from-data'\r\n          }\r\n        }).then(res => {\r\n          context.emit('fileUploaded', res.data)\r\n          uploadedData.value = res.data.data.url\r\n          // 把按钮状态改变为成功\r\n          filesStates.value = 'success'\r\n        }).catch(error => {\r\n          console.log(error)\r\n          // 把状态改变成错误\r\n          filesStates.value = 'error'\r\n        }).finally(() => {\r\n          // 把Input 节点上的value值设置为空\r\n          if (fileInput.value) {\r\n            fileInput.value.value = ''\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return { fileBtnClick, fileInput, filesStates, handleFileChange, uploadedData }\r\n  }\r\n})\r\n</script>\r\n","\r\nimport { defineComponent, ref, PropType, watch } from 'vue'\r\n// import { axiosInstance } from '../axiosDefaults'\r\nimport axios from 'axios'\r\ntype filesType = 'ready' | 'loading' | 'success' | 'error'\r\ntype filesFunction = (file: File) => boolean\r\nexport default defineComponent({\r\n  name: 'Uploader',\r\n  props: {\r\n    action: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    beforeUpData: {\r\n      type: Function as PropType<filesFunction>\r\n    },\r\n    uploaded: {\r\n      type: Object\r\n    }\r\n  },\r\n  inheritAttrs: false,\r\n  emits: ['fileUploaded', 'uploadedError'],\r\n  setup (props, context) {\r\n    const uploadedData = ref(props.uploaded)\r\n    // 上传文件状态\r\n    const filesStates = ref<filesType>(props.uploaded ? 'success' : 'ready')\r\n\r\n    watch(() => props.uploaded, newValue => {\r\n      if (newValue) {\r\n        filesStates.value = 'success'\r\n        uploadedData.value = newValue.data.url\r\n      }\r\n    })\r\n    // 上传Input 的 dom\r\n    const fileInput = ref<null | HTMLInputElement>(null)\r\n    const fileBtnClick = () => { // 按钮的点击事件\r\n      if (fileInput.value) {\r\n        fileInput.value.click() // 使用click()点击api 模拟点击\r\n      }\r\n    }\r\n    // 上传事件\r\n    const handleFileChange = async (e: Event) => {\r\n      const target = e.target as HTMLInputElement\r\n      const files = target.files // 获取上传文件的list\r\n      if (files) {\r\n        const filesArr = Array.from(files)\r\n        if (props.beforeUpData) { // 上传类型的限制\r\n          const result = props.beforeUpData(filesArr[0])\r\n          if (!result) {\r\n            filesStates.value = 'error'\r\n            return\r\n          }\r\n        }\r\n        filesStates.value = 'loading'\r\n        // 把fileList 转换成一个数组\r\n        // 实例化表单\r\n        const formData = new FormData()\r\n        // 把上传的文件传入表单中\r\n        formData.append('file', filesArr[0])\r\n        // const firstFiles = filesArr[0]\r\n        // 发送请求把文件传给后端\r\n        await axios.post(props.action, formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/from-data'\r\n          }\r\n        }).then(res => {\r\n          context.emit('fileUploaded', res.data)\r\n          uploadedData.value = res.data.data.url\r\n          // 把按钮状态改变为成功\r\n          filesStates.value = 'success'\r\n        }).catch(error => {\r\n          console.log(error)\r\n          // 把状态改变成错误\r\n          filesStates.value = 'error'\r\n        }).finally(() => {\r\n          // 把Input 节点上的value值设置为空\r\n          if (fileInput.value) {\r\n            fileInput.value.value = ''\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return { fileBtnClick, fileInput, filesStates, handleFileChange, uploadedData }\r\n  }\r\n})\r\n","import { render } from \"./Uploader.vue?vue&type=template&id=74bdd20f\"\nimport script from \"./Uploader.vue?vue&type=script&lang=ts\"\nexport * from \"./Uploader.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\r\nimport { ref, defineComponent, onMounted, reactive } from 'vue'\r\nimport ValidateForm from './ValidateForm.vue'\r\nimport ValidateInput from './ValidateInput.vue'\r\nimport { useStore } from 'vuex'\r\nimport { beforeUploadCheck } from '../helps'\r\nimport { GlobalDataProps, PostProps, loaderResType, imageData } from '../store'\r\nimport createMessage from './createMessage'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport Uploader from './Uploader.vue'\r\ninterface textsRules{\r\n  type: 'required';\r\n  message: string;\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'CreatePost',\r\n  components: {\r\n    ValidateForm,\r\n    ValidateInput,\r\n    Uploader\r\n  },\r\n  setup () {\r\n    const router = useRouter()\r\n    const route = useRoute()\r\n    const isEditMode = !!route.query.id\r\n    const store = useStore<GlobalDataProps>()\r\n    const uploadedImageData = ref()\r\n    const tliteRules: textsRules[] = [\r\n      {\r\n        type: 'required',\r\n        message: '文章标题不能为空'\r\n      }\r\n    ]\r\n    const textRules: textsRules[] = [\r\n      {\r\n        type: 'required',\r\n        message: '文章详情不能为空'\r\n      }\r\n    ]\r\n    const val = reactive({\r\n      tliteValue: '',\r\n      textValue: ''\r\n    })\r\n    onMounted(() => {\r\n      if (isEditMode) {\r\n        store.dispatch('postDetailRst', route.query.id).then((res: PostProps) => {\r\n          if (res.image) {\r\n            uploadedImageData.value = { data: res.image }\r\n          }\r\n          val.tliteValue = res.title\r\n          val.textValue = res.content || ''\r\n        })\r\n      }\r\n    })\r\n    let imageId = ''\r\n    const handleFileUploaded = (rawData: loaderResType<imageData>) => {\r\n      if (rawData.data._id) {\r\n        imageId = rawData.data._id\r\n      }\r\n    }\r\n    const submitFn = (value: boolean) => {\r\n      if (value) {\r\n        const { column, _id } = store.state.user\r\n        if (column) {\r\n          const PostData: PostProps = { // 文本数据\r\n            column: `${column}`,\r\n            title: val.tliteValue,\r\n            content: val.textValue,\r\n            author: `${_id}`\r\n          }\r\n          if (imageId) {\r\n            PostData.image = imageId\r\n          }\r\n          const actionName = isEditMode ? 'updatePost' : 'postDetailRst'\r\n          const sendData = isEditMode ? {\r\n            id: route.query.id,\r\n            payload: PostData\r\n          } : PostData\r\n          store.dispatch(actionName, sendData).then(() => {\r\n            createMessage('发表成功, 2秒后跳转到文章', 'success', 2000)\r\n            setTimeout(() => {\r\n              router.push({ name: 'columnDetail', params: { id: column } })\r\n            }, 2000)\r\n          })\r\n        }\r\n      }\r\n    }\r\n    // 上传文件类型限制功能\r\n    const beforeUpData = (file: File) => {\r\n      const format = ['image/jpeg', 'image/png']\r\n      const result = beforeUploadCheck(file, { format, size: 1 })\r\n      if (result.passed) {\r\n        createMessage('上传成功', 'success')\r\n      } else {\r\n        if (result.error === 'format') {\r\n          createMessage('上传图片只能是image/jpeg格式', 'error')\r\n        } else {\r\n          createMessage('上传图片大小超出1M', 'error')\r\n        }\r\n      }\r\n\r\n      return result.passed\r\n    }\r\n    //  成功结果触发\r\n    const onfileUploaded = (resData: loaderResType<imageData>) => {\r\n      createMessage(`上传成功，成功id为：${resData.data._id}`, 'success')\r\n    }\r\n\r\n    return { tliteRules, textRules, val, submitFn, onfileUploaded, beforeUpData, handleFileUploaded, uploadedImageData, isEditMode }\r\n  }\r\n})\r\n","import { render } from \"./CreatePost.vue?vue&type=template&id=8e4def58\"\nimport script from \"./CreatePost.vue?vue&type=script&lang=ts\"\nexport * from \"./CreatePost.vue?vue&type=script&lang=ts\"\n\nimport \"./CreatePost.vue?vue&type=style&index=0&id=8e4def58&lang=css\"\nscript.render = render\n\nexport default script","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./CreatePost.vue?vue&type=style&index=0&id=8e4def58&lang=css\""],"sourceRoot":""}